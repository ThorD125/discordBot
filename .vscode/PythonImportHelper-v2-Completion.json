[
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "baro",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "events",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "sortie",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "cetus",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "vallis",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "arbitration",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "steelPath",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "archonHunt",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "isExtraImport": true,
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "importPath": "util.py.env",
        "description": "util.py.env",
        "isExtraImport": true,
        "detail": "util.py.env",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "importPath": "util.py.env",
        "description": "util.py.env",
        "isExtraImport": true,
        "detail": "util.py.env",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "CMDping",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "CMDtraceroute",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "CMDdig",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "CMDranGenPassword",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "downisit",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "GETCAT",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "GETtetrio",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "GETwf",
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "isExtraImport": true,
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "updateSET",
        "importPath": "util.py.setup",
        "description": "util.py.setup",
        "isExtraImport": true,
        "detail": "util.py.setup",
        "documentation": {}
    },
    {
        "label": "restartSET",
        "importPath": "util.py.setup",
        "description": "util.py.setup",
        "isExtraImport": true,
        "detail": "util.py.setup",
        "documentation": {}
    },
    {
        "label": "steam_logic",
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "isExtraImport": true,
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "gTTS",
        "importPath": "gtts",
        "description": "gtts",
        "isExtraImport": true,
        "detail": "gtts",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "get_list_from_mariadb",
        "kind": 2,
        "importPath": "service.dbtest",
        "description": "service.dbtest",
        "peekOfCode": "def get_list_from_mariadb(column=\"*\", table=\"text\"):\n    try:\n        load_dotenv()\n        host=os.getenv(\"host\")\n        user=os.getenv(\"user\")\n        password=os.getenv(\"password\")\n        database=os.getenv(\"database\")\n        if host is None or user is None or password is None or database is None:\n            print(\"Error: Bot token not found in .env file.\")\n            exit(1)",
        "detail": "service.dbtest",
        "documentation": {}
    },
    {
        "label": "commandFilter",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def commandFilter(input):\n    print(input)\n    return input.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\t\", \"\").split(\"&&\")[0]\ndef numberFilter(input):\n    return int(input)\ndef downisit(url):\n    url = commandFilter(url)\n    return f\"{url} is down!\" if json.loads(bashCommand(f\"curl https://monitor-api.vercel.app/api/public?url={url} -s\")).get(\"isDown\") else f\"{url} is up!\"\ndef CMDping(url):\n    return bashCommand(f\"ping -c 4 {commandFilter(url)}\")",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "numberFilter",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def numberFilter(input):\n    return int(input)\ndef downisit(url):\n    url = commandFilter(url)\n    return f\"{url} is down!\" if json.loads(bashCommand(f\"curl https://monitor-api.vercel.app/api/public?url={url} -s\")).get(\"isDown\") else f\"{url} is up!\"\ndef CMDping(url):\n    return bashCommand(f\"ping -c 4 {commandFilter(url)}\")\ndef CMDtraceroute(url, amount=15):\n    return bashCommand(f\"traceroute -4 {commandFilter(url)} -m {amount}\")\ndef CMDdig(url):",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "downisit",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def downisit(url):\n    url = commandFilter(url)\n    return f\"{url} is down!\" if json.loads(bashCommand(f\"curl https://monitor-api.vercel.app/api/public?url={url} -s\")).get(\"isDown\") else f\"{url} is up!\"\ndef CMDping(url):\n    return bashCommand(f\"ping -c 4 {commandFilter(url)}\")\ndef CMDtraceroute(url, amount=15):\n    return bashCommand(f\"traceroute -4 {commandFilter(url)} -m {amount}\")\ndef CMDdig(url):\n    return bashCommand(f\"dig {commandFilter(url)}\")\ndef CMDranGenPassword(amount=20):",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "CMDping",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def CMDping(url):\n    return bashCommand(f\"ping -c 4 {commandFilter(url)}\")\ndef CMDtraceroute(url, amount=15):\n    return bashCommand(f\"traceroute -4 {commandFilter(url)} -m {amount}\")\ndef CMDdig(url):\n    return bashCommand(f\"dig {commandFilter(url)}\")\ndef CMDranGenPassword(amount=20):\n    return bashCommand(f\"cat /dev/urandom | tr -dc 'A-Za-z0-9!?><,./\\-_=+~:;*&^%$#@()[]' | head -c {numberFilter(amount)}\")\ndef GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "CMDtraceroute",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def CMDtraceroute(url, amount=15):\n    return bashCommand(f\"traceroute -4 {commandFilter(url)} -m {amount}\")\ndef CMDdig(url):\n    return bashCommand(f\"dig {commandFilter(url)}\")\ndef CMDranGenPassword(amount=20):\n    return bashCommand(f\"cat /dev/urandom | tr -dc 'A-Za-z0-9!?><,./\\-_=+~:;*&^%$#@()[]' | head -c {numberFilter(amount)}\")\ndef GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")\ndef GETtetrio(user):\n    user = commandFilter(user)",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "CMDdig",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def CMDdig(url):\n    return bashCommand(f\"dig {commandFilter(url)}\")\ndef CMDranGenPassword(amount=20):\n    return bashCommand(f\"cat /dev/urandom | tr -dc 'A-Za-z0-9!?><,./\\-_=+~:;*&^%$#@()[]' | head -c {numberFilter(amount)}\")\ndef GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")\ndef GETtetrio(user):\n    user = commandFilter(user)\n    tetrio = bashCommand(f\"curl https://ch.tetr.io/api/users/{user} -s\")\n    if not json.loads(tetrio).get(\"success\"):",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "CMDranGenPassword",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def CMDranGenPassword(amount=20):\n    return bashCommand(f\"cat /dev/urandom | tr -dc 'A-Za-z0-9!?><,./\\-_=+~:;*&^%$#@()[]' | head -c {numberFilter(amount)}\")\ndef GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")\ndef GETtetrio(user):\n    user = commandFilter(user)\n    tetrio = bashCommand(f\"curl https://ch.tetr.io/api/users/{user} -s\")\n    if not json.loads(tetrio).get(\"success\"):\n        return \"User not found!\"\n    else:",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "GETCAT",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")\ndef GETtetrio(user):\n    user = commandFilter(user)\n    tetrio = bashCommand(f\"curl https://ch.tetr.io/api/users/{user} -s\")\n    if not json.loads(tetrio).get(\"success\"):\n        return \"User not found!\"\n    else:\n        tetrior = json.loads(tetrio).get(\"data\").get(\"user\")\n        return f\"\"\"```",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "GETtetrio",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def GETtetrio(user):\n    user = commandFilter(user)\n    tetrio = bashCommand(f\"curl https://ch.tetr.io/api/users/{user} -s\")\n    if not json.loads(tetrio).get(\"success\"):\n        return \"User not found!\"\n    else:\n        tetrior = json.loads(tetrio).get(\"data\").get(\"user\")\n        return f\"\"\"```\n{user}'s stats:\nXP: {tetrior.get(\"xp\")}",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "GETwf",
        "kind": 2,
        "importPath": "util.py.commands",
        "description": "util.py.commands",
        "peekOfCode": "def GETwf():\n    return f\"\"\"```{baro()}\nevents: {events()}\nsortie: {sortie()}\n{cetus()}\n{vallis()}\narbitration: {arbitration()}\nsteelpath: {steelPath()}\nArchon Hunt: {archonHunt()}```\"\"\"",
        "detail": "util.py.commands",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "kind": 2,
        "importPath": "util.py.env",
        "description": "util.py.env",
        "peekOfCode": "def loadEnv():\n    load_dotenv()\n    returner = {}\n    for key in [\"token\", \"serverid\", \"steam_key\", \"url_all_games\"]:\n        getKey = os.getenv(key.upper())\n        if getKey is None:\n            log(f\"Error: {key} not found in .env file.\")\n            exit(1)\n        else:\n            returner[key.upper()] = getKey",
        "detail": "util.py.env",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def log(message):\n    os.popen(f\"wall {message}\")\ndef bashCommand(command):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\n    process.wait()\n    return process.stdout.read().decode(\"utf-8\")",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def bashCommand(command):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\n    process.wait()\n    return process.stdout.read().decode(\"utf-8\")",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "updateSET",
        "kind": 2,
        "importPath": "util.py.setup",
        "description": "util.py.setup",
        "peekOfCode": "def updateSET():\n    bashCommand(f\"./update.sh\")\ndef restartSET():\n    bashCommand(f\"./util/sh/restart.sh\")",
        "detail": "util.py.setup",
        "documentation": {}
    },
    {
        "label": "restartSET",
        "kind": 2,
        "importPath": "util.py.setup",
        "description": "util.py.setup",
        "peekOfCode": "def restartSET():\n    bashCommand(f\"./util/sh/restart.sh\")",
        "detail": "util.py.setup",
        "documentation": {}
    },
    {
        "label": "get_games",
        "kind": 2,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "def get_games(url):\n    r = requests.get(url)\n    data = r.json()\n    try:\n        games = data['response']['games']\n        return games\n    except KeyError:\n        return []\ndef get_game_ids(games):\n    game_Ids = []",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "get_game_ids",
        "kind": 2,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "def get_game_ids(games):\n    game_Ids = []\n    for game in games:\n        game_Ids.append(game[\"appid\"])\n    return game_Ids\ndef person_with_least_games(list_game_ids):\n    return min(list_game_ids, key=len)\ndef is_item_in_list_of_lists(item, list_of_lists):\n    return all(item in sublist for sublist in list_of_lists)\ndef get_all_games(url):",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "person_with_least_games",
        "kind": 2,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "def person_with_least_games(list_game_ids):\n    return min(list_game_ids, key=len)\ndef is_item_in_list_of_lists(item, list_of_lists):\n    return all(item in sublist for sublist in list_of_lists)\ndef get_all_games(url):\n    r = requests.get(url)\n    data = r.json()\n    games = data['applist']['apps']\n    return games\ndef get_game_names(games):",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "is_item_in_list_of_lists",
        "kind": 2,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "def is_item_in_list_of_lists(item, list_of_lists):\n    return all(item in sublist for sublist in list_of_lists)\ndef get_all_games(url):\n    r = requests.get(url)\n    data = r.json()\n    games = data['applist']['apps']\n    return games\ndef get_game_names(games):\n    game_names = []\n    for game in games:",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "get_all_games",
        "kind": 2,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "def get_all_games(url):\n    r = requests.get(url)\n    data = r.json()\n    games = data['applist']['apps']\n    return games\ndef get_game_names(games):\n    game_names = []\n    for game in games:\n        game_names.append(game[\"name\"])\n    return game_names",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "get_game_names",
        "kind": 2,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "def get_game_names(games):\n    game_names = []\n    for game in games:\n        game_names.append(game[\"name\"])\n    return game_names\ndef steam_logic(user_list):\n    list_users_games = []\n    for user_id in user_list:\n        playlist = f\"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key={steam_key}&steamid={user_id}&format=json\"\n        games = get_games(playlist)",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "steam_logic",
        "kind": 2,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "def steam_logic(user_list):\n    list_users_games = []\n    for user_id in user_list:\n        playlist = f\"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key={steam_key}&steamid={user_id}&format=json\"\n        games = get_games(playlist)\n        list_users_games.append(games)\n    list_game_ids = []\n    for games in list_users_games:\n        game_ids = get_game_ids(games)\n        list_game_ids.append(game_ids)",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "env = loadEnv()\nsteam_key = env[\"STEAM_KEY\"]\nurl_all_games = env[\"URL_ALL_GAMES\"]\ndef get_games(url):\n    r = requests.get(url)\n    data = r.json()\n    try:\n        games = data['response']['games']\n        return games\n    except KeyError:",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "steam_key",
        "kind": 5,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "steam_key = env[\"STEAM_KEY\"]\nurl_all_games = env[\"URL_ALL_GAMES\"]\ndef get_games(url):\n    r = requests.get(url)\n    data = r.json()\n    try:\n        games = data['response']['games']\n        return games\n    except KeyError:\n        return []",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "url_all_games",
        "kind": 5,
        "importPath": "util.py.steamgamechecker",
        "description": "util.py.steamgamechecker",
        "peekOfCode": "url_all_games = env[\"URL_ALL_GAMES\"]\ndef get_games(url):\n    r = requests.get(url)\n    data = r.json()\n    try:\n        games = data['response']['games']\n        return games\n    except KeyError:\n        return []\ndef get_game_ids(games):",
        "detail": "util.py.steamgamechecker",
        "documentation": {}
    },
    {
        "label": "wfGet",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def wfGet(data=None):\n    return bashCommand(f\"curl -s https://api.warframestat.us/pc/en/{data} -L\")\ndef baro():\n    voidTrader = json.loads(wfGet(\"voidTrader\"))\n    if voidTrader.get(\"active\"):\n        return f\"\"\"{voidTrader.get(\"character\")} in {voidTrader.get(\"endString\")}: {[item.get(\"item\") for item in voidTrader.get(\"inventory\")]}\"\"\"\n    else:\n        return f\"\"\"{voidTrader.get(\"character\")} in {voidTrader.get(\"startString\")}\"\"\"\ndef events():\n    events = json.loads(wfGet(\"events\"))",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "baro",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def baro():\n    voidTrader = json.loads(wfGet(\"voidTrader\"))\n    if voidTrader.get(\"active\"):\n        return f\"\"\"{voidTrader.get(\"character\")} in {voidTrader.get(\"endString\")}: {[item.get(\"item\") for item in voidTrader.get(\"inventory\")]}\"\"\"\n    else:\n        return f\"\"\"{voidTrader.get(\"character\")} in {voidTrader.get(\"startString\")}\"\"\"\ndef events():\n    events = json.loads(wfGet(\"events\"))\n    return f\"\"\"{[f'{event.get(\"description\")}: {[reward.get(\"items\") for reward in event.get(\"rewards\")]}' for event in events]}\"\"\"\ndef sortie():",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "events",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def events():\n    events = json.loads(wfGet(\"events\"))\n    return f\"\"\"{[f'{event.get(\"description\")}: {[reward.get(\"items\") for reward in event.get(\"rewards\")]}' for event in events]}\"\"\"\ndef sortie():\n    sortie = json.loads(wfGet(\"sortie\"))\n    return f\"\"\"{sortie.get(\"faction\")}-{sortie.get(\"boss\")}: {[variant.get(\"missionType\") for variant in sortie.get(\"variants\")]}\"\"\"\ndef cetus():\n    cetus = json.loads(wfGet(\"cetusCycle\"))\n    if cetus.get(\"state\") == \"day\":\n        return f\"\"\"Cetus: No Eidolon for {cetus.get(\"timeLeft\")}\"\"\"",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "sortie",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def sortie():\n    sortie = json.loads(wfGet(\"sortie\"))\n    return f\"\"\"{sortie.get(\"faction\")}-{sortie.get(\"boss\")}: {[variant.get(\"missionType\") for variant in sortie.get(\"variants\")]}\"\"\"\ndef cetus():\n    cetus = json.loads(wfGet(\"cetusCycle\"))\n    if cetus.get(\"state\") == \"day\":\n        return f\"\"\"Cetus: No Eidolon for {cetus.get(\"timeLeft\")}\"\"\"\n    return f\"\"\"Cetus: An Eidolon for {cetus.get(\"timeLeft\")}\"\"\"\ndef vallis():\n    vallis = json.loads(wfGet(\"vallisCycle\"))",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "cetus",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def cetus():\n    cetus = json.loads(wfGet(\"cetusCycle\"))\n    if cetus.get(\"state\") == \"day\":\n        return f\"\"\"Cetus: No Eidolon for {cetus.get(\"timeLeft\")}\"\"\"\n    return f\"\"\"Cetus: An Eidolon for {cetus.get(\"timeLeft\")}\"\"\"\ndef vallis():\n    vallis = json.loads(wfGet(\"vallisCycle\"))\n    return f\"\"\"Fortuna: {vallis.get(\"state\")} for {vallis.get(\"timeLeft\")}\"\"\"\ndef arbitration():\n    arbitration = json.loads(wfGet(\"arbitration\"))",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "vallis",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def vallis():\n    vallis = json.loads(wfGet(\"vallisCycle\"))\n    return f\"\"\"Fortuna: {vallis.get(\"state\")} for {vallis.get(\"timeLeft\")}\"\"\"\ndef arbitration():\n    arbitration = json.loads(wfGet(\"arbitration\"))\n    try:\n        return f\"\"\"{arbitration.get(\"enemy\")}: {arbitration.get(\"type\")} until {arbitration.get(\"expiry\").split(\"T\")[1].split(\".\")[0]}\"\"\"\n    except:\n        return f\"\"\"[UNSTABLE], NODATA\"\"\"\ndef steelPath():",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "arbitration",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def arbitration():\n    arbitration = json.loads(wfGet(\"arbitration\"))\n    try:\n        return f\"\"\"{arbitration.get(\"enemy\")}: {arbitration.get(\"type\")} until {arbitration.get(\"expiry\").split(\"T\")[1].split(\".\")[0]}\"\"\"\n    except:\n        return f\"\"\"[UNSTABLE], NODATA\"\"\"\ndef steelPath():\n    steelPath = json.loads(wfGet(\"steelPath\"))\n    return f\"\"\"{steelPath.get(\"currentReward\").get(\"name\")} for {steelPath.get(\"remaining\")}\"\"\"\ndef archonHunt():",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "steelPath",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def steelPath():\n    steelPath = json.loads(wfGet(\"steelPath\"))\n    return f\"\"\"{steelPath.get(\"currentReward\").get(\"name\")} for {steelPath.get(\"remaining\")}\"\"\"\ndef archonHunt():\n    archonHunt = json.loads(wfGet(\"archonHunt\"))\n    return f\"\"\"{archonHunt.get(\"boss\")} for {archonHunt.get(\"eta\")}: {[mission.get(\"typeKey\") for mission in archonHunt.get(\"missions\")]}\"\"\"",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "archonHunt",
        "kind": 2,
        "importPath": "util.py.warframeConverter",
        "description": "util.py.warframeConverter",
        "peekOfCode": "def archonHunt():\n    archonHunt = json.loads(wfGet(\"archonHunt\"))\n    return f\"\"\"{archonHunt.get(\"boss\")} for {archonHunt.get(\"eta\")}: {[mission.get(\"typeKey\") for mission in archonHunt.get(\"missions\")]}\"\"\"",
        "detail": "util.py.warframeConverter",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "env = loadEnv()\nbot = discord.Bot()\n@bot.event\nasync def on_ready():\n    log(f\"We have logged in as {bot.user}\")\n@bot.slash_command(description=\"Pong a URL\")\nasync def ping(ctx, url=None):\n    if url is None:\n        await ctx.respond(\"pong!\")\n    else:",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "bot = discord.Bot()\n@bot.event\nasync def on_ready():\n    log(f\"We have logged in as {bot.user}\")\n@bot.slash_command(description=\"Pong a URL\")\nasync def ping(ctx, url=None):\n    if url is None:\n        await ctx.respond(\"pong!\")\n    else:\n        await ctx.defer()",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "url = \"https://google.com\"",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "text_to_speech",
        "kind": 2,
        "importPath": "texttospeechtest",
        "description": "texttospeechtest",
        "peekOfCode": "def text_to_speech(text):\n    # Create a gTTS object\n    tts = gTTS(text=text, lang='en')\n    # Save the speech to a BytesIO object\n    speech_buffer = BytesIO()\n    tts.write_to_fp(speech_buffer)\n    speech_buffer.seek(0)\n    # Initialize Pygame mixer\n    pygame.mixer.init()\n    pygame.mixer.music.load(speech_buffer)",
        "detail": "texttospeechtest",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "texttospeechtest",
        "description": "texttospeechtest",
        "peekOfCode": "text = \"Hello, I am a text-to-speech example in Python.\"\ntext_to_speech(text)",
        "detail": "texttospeechtest",
        "documentation": {}
    }
]