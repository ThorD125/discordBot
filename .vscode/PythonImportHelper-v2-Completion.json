[
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "commands",
        "importPath": "discord.ext",
        "description": "discord.ext",
        "isExtraImport": true,
        "detail": "discord.ext",
        "documentation": {}
    },
    {
        "label": "get_list_from_mariadb",
        "importPath": "dbtest",
        "description": "dbtest",
        "isExtraImport": true,
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "get_list_from_mariadb",
        "kind": 2,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "def get_list_from_mariadb(column=\"*\", table=\"text\"):\n    try:\n        load_dotenv()\n        host=os.getenv(\"host\")\n        user=os.getenv(\"user\")\n        password=os.getenv(\"password\")\n        database=os.getenv(\"database\")\n        if host is None or user is None or password is None or database is None:\n            print(\"Error: Bot token not found in .env file.\")\n            exit(1)",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "TOKEN = os.getenv('TOKEN')\nif TOKEN is None:\n    print(\"Error: Bot token not found in .env file.\")\n    exit(1)\nintents = discord.Intents.default()\nintents.message_content = True\nclient = discord.Client(intents=intents)\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "intents",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "intents = discord.Intents.default()\nintents.message_content = True\nclient = discord.Client(intents=intents)\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')\n@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        return",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "intents.message_content",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "intents.message_content = True\nclient = discord.Client(intents=intents)\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')\n@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        return\n    # if message.content.startswith('dbtest'):",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "client = discord.Client(intents=intents)\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')\n@client.event\nasync def on_message(message):\n    if message.author == client.user:\n        return\n    # if message.content.startswith('dbtest'):\n    #     await message.channel.send(get_list_from_mariadb())",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "client = commands.Bot(\n    command_prefix=commands.when_mentioned_or('!'), intents=intents)\n@client.command(name=\"ping\", description=\"Responds with pong!\")\nasync def ping(ctx):\n    await ctx.send(\"pong!\")\nclient.run(TOKEN)",
        "detail": "index",
        "documentation": {}
    }
]