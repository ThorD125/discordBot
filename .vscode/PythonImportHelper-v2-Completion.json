[
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "importPath": "util.py.env",
        "description": "util.py.env",
        "isExtraImport": true,
        "detail": "util.py.env",
        "documentation": {}
    },
    {
        "label": "get_list_from_mariadb",
        "kind": 2,
        "importPath": "service.dbtest",
        "description": "service.dbtest",
        "peekOfCode": "def get_list_from_mariadb(column=\"*\", table=\"text\"):\n    try:\n        load_dotenv()\n        host=os.getenv(\"host\")\n        user=os.getenv(\"user\")\n        password=os.getenv(\"password\")\n        database=os.getenv(\"database\")\n        if host is None or user is None or password is None or database is None:\n            print(\"Error: Bot token not found in .env file.\")\n            exit(1)",
        "detail": "service.dbtest",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "kind": 2,
        "importPath": "util.py.env",
        "description": "util.py.env",
        "peekOfCode": "def loadEnv():\n    load_dotenv()\n    returner = {}\n    for key in [\"token\", \"serverid\"]:\n        getKey = os.getenv(key.upper())\n        if getKey is None:\n            log(f\"Error: {key} not found in .env file.\")\n            exit(1)\n        else:\n            returner[key.upper()] = getKey",
        "detail": "util.py.env",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def log(message):\n    os.popen(f\"wall {message}\")\nasync def bashCommand(command):\n    print(f\"1Command: {command}\")\n    output = subprocess.check_output(command, shell=True, text=True)\n    print(f\"2Output: {output}\")\n    return output",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "kind": 2,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "def bashCommand(command):\n    return subprocess.check_output(command, shell=True, text=True)\n@bot.event\nasync def on_ready():\n    log(f\"We have logged in as {bot.user}\")\n@bot.slash_command(description=\"Pong a URL\")\nasync def ping(ctx, url=None):\n    if url is None:\n        await ctx.respond(\"pong!\")\n    else:",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "env = loadEnv()\nbot = discord.Bot()\ndef bashCommand(command):\n    return subprocess.check_output(command, shell=True, text=True)\n@bot.event\nasync def on_ready():\n    log(f\"We have logged in as {bot.user}\")\n@bot.slash_command(description=\"Pong a URL\")\nasync def ping(ctx, url=None):\n    if url is None:",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "bot = discord.Bot()\ndef bashCommand(command):\n    return subprocess.check_output(command, shell=True, text=True)\n@bot.event\nasync def on_ready():\n    log(f\"We have logged in as {bot.user}\")\n@bot.slash_command(description=\"Pong a URL\")\nasync def ping(ctx, url=None):\n    if url is None:\n        await ctx.respond(\"pong!\")",
        "detail": "index",
        "documentation": {}
    }
]