[
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "util.py.helper",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "CMDdig",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "CMDping",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "CMDranGenPassword",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "CMDtraceroute",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "downisit",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "GETCAT",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "GETtetrio",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "isExtraImport": true,
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "importPath": "util.py.env",
        "description": "util.py.env",
        "isExtraImport": true,
        "detail": "util.py.env",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "test",
        "description": "test",
        "isExtraImport": true,
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "get_list_from_mariadb",
        "kind": 2,
        "importPath": "service.dbtest",
        "description": "service.dbtest",
        "peekOfCode": "def get_list_from_mariadb(column=\"*\", table=\"text\"):\n    try:\n        load_dotenv()\n        host=os.getenv(\"host\")\n        user=os.getenv(\"user\")\n        password=os.getenv(\"password\")\n        database=os.getenv(\"database\")\n        if host is None or user is None or password is None or database is None:\n            print(\"Error: Bot token not found in .env file.\")\n            exit(1)",
        "detail": "service.dbtest",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "kind": 2,
        "importPath": "util.py.env",
        "description": "util.py.env",
        "peekOfCode": "def loadEnv():\n    load_dotenv()\n    returner = {}\n    for key in [\"token\", \"serverid\"]:\n        getKey = os.getenv(key.upper())\n        if getKey is None:\n            log(f\"Error: {key} not found in .env file.\")\n            exit(1)\n        else:\n            returner[key.upper()] = getKey",
        "detail": "util.py.env",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def log(message):\n    os.popen(f\"wall {message}\")\ndef bashCommand(command):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\n    process.wait()\n    return process.stdout.read().decode(\"utf-8\")\ndef commandFilter(input):\n    return input.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\t\", \"\").split(\"&&\")[0]\ndef downisit(url):\n    url = commandFilter(url)",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "bashCommand",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def bashCommand(command):\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)\n    process.wait()\n    return process.stdout.read().decode(\"utf-8\")\ndef commandFilter(input):\n    return input.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\t\", \"\").split(\"&&\")[0]\ndef downisit(url):\n    url = commandFilter(url)\n    return f\"{url} is down!\" if json.loads(bashCommand(f\"curl https://monitor-api.vercel.app/api/public?url={url} -s\")).get(\"isDown\") else f\"{url} is up!\"\ndef CMDping(url):",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "commandFilter",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def commandFilter(input):\n    return input.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\t\", \"\").split(\"&&\")[0]\ndef downisit(url):\n    url = commandFilter(url)\n    return f\"{url} is down!\" if json.loads(bashCommand(f\"curl https://monitor-api.vercel.app/api/public?url={url} -s\")).get(\"isDown\") else f\"{url} is up!\"\ndef CMDping(url):\n    return bashCommand(f\"ping -c 4 {commandFilter(url)}\")\ndef CMDtraceroute(url):\n    return bashCommand(f\"traceroute {commandFilter(url)} \")\ndef CMDdig(url):",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "downisit",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def downisit(url):\n    url = commandFilter(url)\n    return f\"{url} is down!\" if json.loads(bashCommand(f\"curl https://monitor-api.vercel.app/api/public?url={url} -s\")).get(\"isDown\") else f\"{url} is up!\"\ndef CMDping(url):\n    return bashCommand(f\"ping -c 4 {commandFilter(url)}\")\ndef CMDtraceroute(url):\n    return bashCommand(f\"traceroute {commandFilter(url)} \")\ndef CMDdig(url):\n    return bashCommand(f\"dig {commandFilter(url)}\")\ndef CMDranGenPassword(amount):",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "CMDping",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def CMDping(url):\n    return bashCommand(f\"ping -c 4 {commandFilter(url)}\")\ndef CMDtraceroute(url):\n    return bashCommand(f\"traceroute {commandFilter(url)} \")\ndef CMDdig(url):\n    return bashCommand(f\"dig {commandFilter(url)}\")\ndef CMDranGenPassword(amount):\n    return bashCommand(f\"cat /dev/urandom | tr -dc 'A-Za-z0-9!?><,./\\-_=+~:;*&^%$#@()[]' | head -c {commandFilter(amount)}\")\ndef GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "CMDtraceroute",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def CMDtraceroute(url):\n    return bashCommand(f\"traceroute {commandFilter(url)} \")\ndef CMDdig(url):\n    return bashCommand(f\"dig {commandFilter(url)}\")\ndef CMDranGenPassword(amount):\n    return bashCommand(f\"cat /dev/urandom | tr -dc 'A-Za-z0-9!?><,./\\-_=+~:;*&^%$#@()[]' | head -c {commandFilter(amount)}\")\ndef GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")\ndef GETtetrio(user):\n    user = commandFilter(user)",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "CMDdig",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def CMDdig(url):\n    return bashCommand(f\"dig {commandFilter(url)}\")\ndef CMDranGenPassword(amount):\n    return bashCommand(f\"cat /dev/urandom | tr -dc 'A-Za-z0-9!?><,./\\-_=+~:;*&^%$#@()[]' | head -c {commandFilter(amount)}\")\ndef GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")\ndef GETtetrio(user):\n    user = commandFilter(user)\n    tetrio = bashCommand(f\"curl https://ch.tetr.io/api/users/{user} -s\")\n    print(json.loads(tetrio).get(\"success\"))",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "CMDranGenPassword",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def CMDranGenPassword(amount):\n    return bashCommand(f\"cat /dev/urandom | tr -dc 'A-Za-z0-9!?><,./\\-_=+~:;*&^%$#@()[]' | head -c {commandFilter(amount)}\")\ndef GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")\ndef GETtetrio(user):\n    user = commandFilter(user)\n    tetrio = bashCommand(f\"curl https://ch.tetr.io/api/users/{user} -s\")\n    print(json.loads(tetrio).get(\"success\"))\n    if True :\n        return \"User not found!\"",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "GETCAT",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def GETCAT():\n    return json.loads(bashCommand(\"curl https://api.thecatapi.com/v1/images/search -s\"))[0].get(\"url\")\ndef GETtetrio(user):\n    user = commandFilter(user)\n    tetrio = bashCommand(f\"curl https://ch.tetr.io/api/users/{user} -s\")\n    print(json.loads(tetrio).get(\"success\"))\n    if True :\n        return \"User not found!\"\n    else:\n        tetrio = json.loads(tetrio).get(\"data\").get(\"user\")",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "GETtetrio",
        "kind": 2,
        "importPath": "util.py.helper",
        "description": "util.py.helper",
        "peekOfCode": "def GETtetrio(user):\n    user = commandFilter(user)\n    tetrio = bashCommand(f\"curl https://ch.tetr.io/api/users/{user} -s\")\n    print(json.loads(tetrio).get(\"success\"))\n    if True :\n        return \"User not found!\"\n    else:\n        tetrio = json.loads(tetrio).get(\"data\").get(\"user\")\n        return f\"\"\"\n        ```yaml",
        "detail": "util.py.helper",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "env = loadEnv()\nbot = discord.Bot()\n@bot.event\nasync def on_ready():\n    log(f\"We have logged in as {bot.user}\")\n@bot.slash_command(description=\"Pong a URL\")\nasync def ping(ctx, url=None):\n    if url is None:\n        await ctx.respond(\"pong!\")\n    else:",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "bot = discord.Bot()\n@bot.event\nasync def on_ready():\n    log(f\"We have logged in as {bot.user}\")\n@bot.slash_command(description=\"Pong a URL\")\nasync def ping(ctx, url=None):\n    if url is None:\n        await ctx.respond(\"pong!\")\n    else:\n        await ctx.defer()",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "url = \"https://google.com\"\nprint(bashCommand(f\"curl https://monitor-api.vercel.app/api/public?url={url} -s\"))",
        "detail": "test",
        "documentation": {}
    }
]