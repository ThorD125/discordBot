[
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "get_list_from_mariadb",
        "importPath": "dbtest",
        "description": "dbtest",
        "isExtraImport": true,
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "get_list_from_mariadb",
        "kind": 2,
        "importPath": "dbtest",
        "description": "dbtest",
        "peekOfCode": "def get_list_from_mariadb(column=\"*\", table=\"text\"):\n    try:\n        load_dotenv()\n        host=os.getenv(\"host\")\n        user=os.getenv(\"user\")\n        password=os.getenv(\"password\")\n        database=os.getenv(\"database\")\n        if host is None or user is None or password is None or database is None:\n            print(\"Error: Bot token not found in .env file.\")\n            exit(1)",
        "detail": "dbtest",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "TOKEN = os.getenv('TOKEN')\nif TOKEN is None:\n    print(\"Error: Bot token not found in .env file.\")\nSERVERID = os.getenv('SERVERID')\nif SERVERID is None:\n    print(\"Error: Server ID not found in .env file.\")\nbot = discord.Bot()\n@bot.event\nasync def on_ready():\n    print(f\"We have logged in as {bot.user}\")",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "SERVERID",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "SERVERID = os.getenv('SERVERID')\nif SERVERID is None:\n    print(\"Error: Server ID not found in .env file.\")\nbot = discord.Bot()\n@bot.event\nasync def on_ready():\n    print(f\"We have logged in as {bot.user}\")\n@bot.slash_command()\nasync def hello(ctx):\n    await ctx.respond(\"Hello!\")",
        "detail": "index",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "bot = discord.Bot()\n@bot.event\nasync def on_ready():\n    print(f\"We have logged in as {bot.user}\")\n@bot.slash_command()\nasync def hello(ctx):\n    await ctx.respond(\"Hello!\")\nbot.run(TOKEN)",
        "detail": "index",
        "documentation": {}
    }
]